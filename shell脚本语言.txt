shell编程
	1）入门
		#!/bin/bash开头
	 编辑  vim myshell.sh
	 #!/bin/bash
	 echo "hello world"
	 
	 sh myshell.sh  无执行权限也可执行（不建议使用）
	 使用绝对路径或相对路径执行sh命令   ./myshell.sh   或/root/myshell.sh
	 
	 注：echo 输出命令
	 
	2）shell变量
		1.系统变量    $PATH   $USER $HOME $SHELL等   查看系统变量  set
		2.自定义变量
			A=100 echo "$A"   定义变量，输出
					unset A   取消定义
		静态变量
			readonly A=10
			静态变量不能重置
			
		变量名称规则：1.变量名由字母、数字、下划线组成，不能以数字开头；
			2.等号两侧不能有空格；
			3.习惯大写
		赋值变量
		A=`ls /home`  或 A=$(ls /home)
		
		3.定义环境变量
			步骤：
			1：/etc/profile  文件内定义环境变量
				MY_HOME=/opt/myfile
				export MY_HOME
			2: 使环境变量生效，刷新profile文件
				source /etc/profile 
			3：使用环境变量 
				$MY_HOME
		4.参数位置变量
			$0 命令本身
			$1 $2……  对应位置参数
			$*  打出所有参数-整体输出
			$@  打出所有参数-单个输出
			$#  参数个数
			
			例： ./myshell.sh 1 2 3
			$0 --> ./myshell.sh
			$1 --> 1
			$2 --> 2
			$* --> ./myshell.sh 1 2 3
			$# --> 3
		5.预定义变量
			$$  当前进程号 PID
			$!  最后一个进程号
			$?  最后执行进程的结果
			
	3）.运算符
		$((运算符))或$[运算符]
		expr 1 + 2 (符号前后需要加空格)
			例：
				$(()) 方式
				RES=$((2*(4+1)))
				echo "RES=$RES"
				
				$[]  方式
				RES2=$[2*(4+1)]
				echo "RES2=$RES2"
				
				echo "---expr方式---"
				TEMP=`expr 4 + 1`
				RES3=`expr $TEMP \* 2`
				echo "RES3=$RES3"
			例：计算两个参数的和
			RESULT=$[$1+$2]
			echo "RESULT=$RESULT"
			
	4）.条件判断
		 [ 条件 ]（中括号内条件前后空格）
			
			判断语句
				1）整数比较
				-lt 小于
				-le 小于等于
				-eq 等于
				-gt 大于
				-ge 大于等于
				-ne 不等于
				2）字符串比较
				= 
				3）文件权限判断
				-r 读权限
				-w 写权限
				-x 执行权限
				4）文件类型判断
				-f 常规文件存在
				-e 文件存在
				-d 文件夹存在
				
			例： #ok是否=ok
				if [ "OK" = "OK" ]
				then echo "equals"
				fi
				#32是否大于23
				if [ 32 -gt 23 ]
				then echo "yes"
				fi
				#是否存在文件
				if [ -e /root/log.txt]
				then echo "exist"
				fi

	5）.流程控制
		1）if判断
			if [ 条件 ]
				then 程序
			elif [ 条件 ]
				then 程序
			fi
			
			例：if [ $1 -ge $2 ]
					then echo "大于等于"
				elif [ $1 -lt $2 ]
					then echo "小于"
				fi
		2）case语句
			case $变量名 in
			"值1")
			程序
			;;
			"值2")
			程序
			;;
			*)     //默认，default
			程序
			;;
			esac
			
			例： 
				#输出第一个参数对应的星期
				case $1 in
				"1")
				echo "星期一"
				;;
				"2")
				echo "星期二"
				;;
				*)
				echo "其他"
				;;
				esac

		3）for 循环
			A: for 变量 in 值1 值2 ……
				do 程序
			   done
			   
			   例：
			   #打印命令行输入的参数 会使用到$@  $*
			   for i in $*
			   do echo "the num is $i"
			   done
			   echo "----------"
			   for i in $@
			   do echo "the num is $i"
			   done
			   
			   命令 ./myshell.sh 1 2 3
			   输出: (测试结果与课程输出结果不同*********)
			   the num is 1
			   the num is 2
			   the num is 3
			   ----------
			   the num is 1
			   the num is 2
			   the num is 3
			   
			B: for ((变量定义;条件判断;变量值修改))
					do 程序
				done
				例：
				echo "----------for循环2-----------"
				SUN=0
				for ((i=1;i<=100;i++))
				 do SUM=$[$SUM+$i]
				done
				echo "SUM=$SUM"
			
				输出：SUM=5050

		4）while循环
			while [ 条件判断 ]
				do 程序
			done
			
			例：输入n，统计从1 + …… + n 的值
			echo "---------while循环----------"
			SUM=0
			i=0
			while [ $i -le $1 ]
			 do
			   SUM=$[$SUM+$i]
			   i=$[$i+1]
			done
			echo "SUM=$SUM"
			
	6）.读取控制台输入
		read (选项)(参数)
		-p 等待输入
		-t 等待时间（秒）
		例：
		echo "----------控制台输入---------"
		read -p "请输入一个数字num=" NUM
		echo "您输入的数字为num=$NUM"
		#等待10秒
		read -t 10 -p "请输入一个数字num1=" NUM1
		echo "您输入的数字为num1=$NUM1"
		
	7）.函数介绍
		A:系统函数
			basename 路径/文件名   获取包含后缀的文件名
			basename 路径/文件名 .后缀  获取不包含后缀的文件名
			dirname 路径/文件名   获取路径
			例： 
			basename /root/log/log.txt
			basename /root/log/log.txt .txt
			dirname /root/log/log.txt
			输出：
			log.txt
			log
			/root/log
		B：自定义函数
			function 函数名(){
				函数体
			}
			调用函数： 函数名
			
			例：
			function sum(){
			  SUM=$[$N+$M]
			  echo "和是$SUM"
			}
			read -p "请输入第一个数字n:" N
			read -p "请输入第二个数字m:" M
			#调用函数
			sum $N $M

			输出:
			请输入第一个数字n:2
			请输入第二个数字m:3
			和是5
